- name: Remove old docker stuff
  package:
    name: "{{ item }}"
    state: absent
  with_items:
  - docker
  - docker-engine
  - docker.io
  - containerd
  - runc
  - docker-common
  - docker-compose
  - docker-ce
  - docker-ee
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu' or ansible_distribution == 'elementary OS'

- name: Install prereqs
  apt:
    name: "{{ item }}"
    state:  present
  with_items:
  - apt-transport-https
  - ca-certificates
  - software-properties-common

- name: Docker Installation
  apt:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
  - docker.io
  - docker-compose
  - docker

- name: Remove /etc/docker/daemon.json
  file:
    path: /etc/docker/daemon.json
    state:  absent
  notify:
    - Start docker

- name: Check virtualization
  command:  grep -E --color 'vmx|svm' /proc/cpuinfo
  register: check_virtualization

- debug:
    msg:  "Virtualization in the os is enabled/disabled: {{ check_virtualization.stdout }}"

#- name: Get latest kubectl version to tmp file
#  get_url:
#    url:  https://storage.googleapis.com/kubernetes-release/release/stable.txt
#    dest: /tmp/kubectlversion.txt
#
#- name: Get kubectl version from tmp file
#  command:  cat /tmp/kubectlversion.txt
#  register: kubectl_version
  #  command: curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt
  #  warn: false

#- debug:
#    msg: "kubectl version = {{ kubectl_version.stdout }}"
#
#- name: Install kubectl
#  get_url:
#    url:  https://storage.googleapis.com/kubernetes-release/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl
#    mode: 0755
#    dest: /usr/local/bin/kubectl

- name: Install minikube
  get_url:
    url:  https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    mode: 0755
    dest: /usr/local/bin/minikube
    validate_certs: no

#- name: Download helm shell script
#  get_url:
#    url: "https://git.io/get_helm.sh"
#    dest: "/tmp/get_helm.sh"
#
#- name: Install helm and tiller in localhost
#  command: "bash /tmp/get_helm.sh"

  #
  #- name: Add docker GPG key apt key
  #  apt_key:
  #    url: https://download.docker.com/linux/ubuntu/gpg
  #    state: present

  #- name: Get ubuntu lsb_release -cs
  #  command: lsb_release -cs
  #  register: lsb_release

  #- debug:
  #    var:  lsb_release
  #    verbosity: 2
  #
  #- debug:
  #    msg:  "lsb_release = {{ lsb_release.stdout }}"

  #- name: Add Docker Repository
  #  apt_repository:
  #    repo: deb https://download.docker.com/linux/ubuntu disco stable
  #    state: present







  # - name: add Kubernetes apt-key for APT repository
  #   apt_key:
  #     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  #     state: present

  # - name: add Kubernetes APT repository
  #   apt_repository:
  #    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
  #    state: present
  #    filename: 'kubernetes'

  # - name: install kubelet
  #   apt:
  #     name: kubelet
  #     state: absent
  #     update_cache: true

  # - name: install kubeadm
  #   apt:
  #     name: kubeadm
  #     state: absent
  #     update_cache: true


  #- name: software-properties-common
  #  apt:
  #    name: software-properties-common
  #    state: latest
  #    update_cache: yes

  # On Ubuntu target:
  #- apt_repository:
  #    repo: ppa:projectatomic/ppa

  # - name: podman
  #   apt:
  #     name: podman
  #     state: present
  #     update_cache: yes

#- name: Download helm shell script
#  get_url:
#    url: "https://git.io/get_helm.sh"
#    dest: "/tmp/get_helm.sh"
#
#- name: Install helm and tiller in localhost
#  command: "bash /tmp/get_helm.sh"


  #- name: Install snap packages for helm, docker and microk8s
  #  snap:
  #    name: "{{ item }}"
  #    state: present
  #    classic: yes
  #  with_items:
  #  - helm
  #  - docker
  #  - microk8s